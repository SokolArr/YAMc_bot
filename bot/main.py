import telebot
from telebot import types
from helpers.yam_api import *
from helpers.yam_link_parser import *
import hashlib
import time

from options import *

bot = telebot.TeleBot(TG_KEY)

@bot.message_handler(commands=['start'], chat_types=['supergroup'])
def start(message):
    if message.date > bot_time_start:
        chat_id = message.chat.id
        bot.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –æ–±—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ!\n –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –≤–≤–µ–¥–∏ /help")
        
@bot.message_handler(commands=['start'], chat_types=['private'])
def start(message):
    if message.date > bot_time_start:
        chat_id = message.from_user.id
        bot.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –æ–±—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ!\n –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –≤–≤–µ–¥–∏ /help") 
    
@bot.message_handler(commands=['help'], chat_types=['supergroup'])
def start(message):
    if message.date > bot_time_start:
        chat_id = message.chat.id
        bot.send_message(chat_id, "–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –≤ –±–µ—Å–µ–¥–µ –Ω–∞—á–Ω–∏ —Ñ—Ä–∞–∑—É —Å @YAMc_bot, –∞ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫\n–ù–∞–ø—Ä–∏–º–µ—Ä: @YAMc_bot https://music.yandex.ru/album/29998108/track/123237014")
        bot.send_message(chat_id, "–Ø –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã:\n_–¥–∞–π —Å—Å—ã–ª–∫—É_ - –≤–µ—Ä–Ω–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç\n_—É–¥–∞–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç_ - —É–¥–∞–ª–∏—Ç –ø–ª–µ–π–ª–∏—Å—Ç\n_—Å–æ–∑–¥–∞–π –ø–ª–µ–π–ª–∏—Å—Ç_ - —Å–æ–∑–¥–∞—Å—Ç –ø–ª–µ–π–ª–∏—Å—Ç", parse_mode= 'Markdown')
@bot.message_handler(commands=['help'], chat_types=['private'])
def start(message):
    if message.date > bot_time_start:
        chat_id = message.from_user.id
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\nhttps://music.yandex.ru/album/29998108/track/123237014")
        bot.send_message(chat_id, "–Ø –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã:\n_–¥–∞–π —Å—Å—ã–ª–∫—É_ - –≤–µ—Ä–Ω–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç\n_—É–¥–∞–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç_ - —É–¥–∞–ª–∏—Ç –ø–ª–µ–π–ª–∏—Å—Ç\n_—Å–æ–∑–¥–∞–π –ø–ª–µ–π–ª–∏—Å—Ç_ - —Å–æ–∑–¥–∞—Å—Ç –ø–ª–µ–π–ª–∏—Å—Ç", parse_mode= 'Markdown')

@bot.message_handler(chat_types=['private'])
def get_text_messages(message):
    if message.date > bot_time_start:
        mes_txt = message.text
        tg_usr_id = message.from_user.id
        
        try:
            sha_tg_usr_id = hashlib.shake_256(str(tg_usr_id).encode('utf-8')).hexdigest(5)
            playlist_title = str(sha_tg_usr_id + '_all')
        except:
            bot.send_message(tg_usr_id, "–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞")  
            print(dttm(), tg_usr_id, ' - ERROR to get hash')
            return
        
        if(mes_txt.lower().find('–¥–∞–π —Å—Å—ã–ª–∫—É') >= 0):
            try:
                url = get_playlist_url(YA_USR_ID, get_playlist_id_by_title(TOKEN, YA_USR_ID, playlist_title))
                bot.send_message(tg_usr_id, "–î–µ—Ä–∂–∏\n" + url)
            except:
                bot.send_message(tg_usr_id, "–ù–µ –Ω–∞—à–µ–ª —Ç–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç! –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ,\n–ø–æ–ø—Ä–æ—Å–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫:\n–í–≤–µ–¥–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏")
        elif(mes_txt.lower().find('—É–¥–∞–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç') >= 0):
            try:
                drop_playlist(TOKEN, YA_USR_ID, get_playlist_id_by_title(TOKEN, YA_USR_ID, playlist_title))
                bot.send_message(tg_usr_id, "–£–¥–∞–ª–∏–ª!\n")
            except:
                bot.send_message(tg_usr_id, "–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å! –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å,\n–ø–æ–ø—Ä–æ—Å–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫:\n–í–≤–µ–¥–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏")
        elif(mes_txt.lower().find('—Å–æ–∑–¥–∞–π –ø–ª–µ–π–ª–∏—Å—Ç') >= 0):
            try:
                if(if_in_playlists_by_title(TOKEN, YA_USR_ID, playlist_title) == 0):
                    new_playlist_id = create_playlist(TOKEN, YA_USR_ID, playlist_title)
                    url = get_playlist_url(YA_USR_ID, new_playlist_id)
                    bot.send_message(tg_usr_id, "–°–æ–∑–¥–∞–ª –ø–ª–µ–π–ª–∏—Å—Ç!\n" + url)
                else:
                    url = get_playlist_url(YA_USR_ID, get_playlist_id_by_title(TOKEN, YA_USR_ID, playlist_title))
                    bot.send_message(tg_usr_id, "–ü–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω!\n" + url) 
            except:
                bot.send_message(tg_usr_id, "–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
                print(dttm(), tg_usr_id, ' - ERROR to create playlist')
        elif(mes_txt.lower().find('https') >= 0):
            try:
                if(parse_link(mes_txt)):
                    album_id = parse_link(mes_txt)['album_id']
                    track_id = parse_link(mes_txt)['track_id']
                    
                    sha_tg_usr_id = hashlib.shake_256(str(tg_usr_id).encode('utf-8')).hexdigest(5)
                    playlist_title = str(sha_tg_usr_id + '_all')
                    
                    if(if_in_playlists_by_title(TOKEN, YA_USR_ID, playlist_title) == 0):
                        new_playlist_id = create_playlist(TOKEN, YA_USR_ID, playlist_title)
                        url = get_playlist_url(YA_USR_ID, new_playlist_id)
                        
                        add_track_to_playlist(TOKEN, YA_USR_ID, new_playlist_id, album_id, track_id)
                        bot.send_message(tg_usr_id, "–£ —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –æ–±—â–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞, —è —Å–æ–∑–¥–∞–ª –µ–≥–æ –∏ –∑–∞–∫–∏–Ω—É–ª —Ç—É–¥–∞ —Ç—Ä–µ–∫\n" + url)
                    else:
                        playlist_id = get_playlist_id_by_title(TOKEN, YA_USR_ID, playlist_title)
                        
                        add_track_to_playlist(TOKEN, YA_USR_ID, playlist_id, album_id, track_id)
                        bot.send_message(tg_usr_id, "–ó–∞–∫–∏–Ω—É–ª —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç\n" + get_playlist_url(YA_USR_ID, get_playlist_id_by_title(TOKEN, YA_USR_ID, playlist_title)))
                else:
                    print(dttm(), tg_usr_id, '- ERROR parse link')
                    bot.send_message(tg_usr_id, "–ù–µ –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫—É, –ø—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å\n")  
            except:
                print(dttm(), tg_usr_id, '- ERROR add track')
        
@bot.message_handler(content_types=['text'], chat_types=['supergroup'])
def get_text_messages(message):
    if message.text[0:9] == '@YAMc_bot' and message.date > bot_time_start:
        mes_txt = message.text[10:]
        tg_usr_id = message.chat.id

        try:
            sha_tg_usr_id = hashlib.shake_256(str(tg_usr_id).encode('utf-8')).hexdigest(5)
            playlist_title = str(sha_tg_usr_id + '_all')
        except:
            bot.send_message(tg_usr_id, "–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞")  
            print(dttm(), tg_usr_id, ' - ERROR to get hash')
            return
        
        if(mes_txt.lower().find('–¥–∞–π —Å—Å—ã–ª–∫—É') >= 0):
            try:
                url = get_playlist_url(YA_USR_ID, get_playlist_id_by_title(TOKEN, YA_USR_ID, playlist_title))
                bot.send_message(tg_usr_id, "–î–µ—Ä–∂–∏\n" + url)
            except:
                bot.send_message(tg_usr_id, "–ù–µ –Ω–∞—à–µ–ª —Ç–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç! –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ,\n–ø–æ–ø—Ä–æ—Å–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫:\n–í–≤–µ–¥–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏")
        elif(mes_txt.lower().find('—É–¥–∞–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç') >= 0):
            try:
                drop_playlist(TOKEN, YA_USR_ID, get_playlist_id_by_title(TOKEN, YA_USR_ID, playlist_title))
                bot.send_message(tg_usr_id, "–£–¥–∞–ª–∏–ª!\n")
            except:
                bot.send_message(tg_usr_id, "–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å! –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å,\n–ø–æ–ø—Ä–æ—Å–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫:\n–í–≤–µ–¥–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏")
        elif(mes_txt.lower().find('—Å–æ–∑–¥–∞–π –ø–ª–µ–π–ª–∏—Å—Ç') >= 0):
            try:
                if(if_in_playlists_by_title(TOKEN, YA_USR_ID, playlist_title) == 0):
                    new_playlist_id = create_playlist(TOKEN, YA_USR_ID, playlist_title)
                    url = get_playlist_url(YA_USR_ID, new_playlist_id)
                    bot.send_message(tg_usr_id, "–°–æ–∑–¥–∞–ª –ø–ª–µ–π–ª–∏—Å—Ç!\n" + url)
                else:
                    url = get_playlist_url(YA_USR_ID, get_playlist_id_by_title(TOKEN, YA_USR_ID, playlist_title))
                    bot.send_message(tg_usr_id, "–ü–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω!\n" + url) 
            except:
                bot.send_message(tg_usr_id, "–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
                print(dttm(), tg_usr_id, ' - ERROR to create playlist')
        elif(mes_txt.lower().find('https') >= 0):
            try:
                if(parse_link(mes_txt)):
                    album_id = parse_link(mes_txt)['album_id']
                    track_id = parse_link(mes_txt)['track_id']
                    
                    sha_tg_usr_id = hashlib.shake_256(str(tg_usr_id).encode('utf-8')).hexdigest(5)
                    playlist_title = str(sha_tg_usr_id + '_all')
                    
                    if(if_in_playlists_by_title(TOKEN, YA_USR_ID, playlist_title) == 0):
                        new_playlist_id = create_playlist(TOKEN, YA_USR_ID, playlist_title)
                        url = get_playlist_url(YA_USR_ID, new_playlist_id)
                        
                        add_track_to_playlist(TOKEN, YA_USR_ID, new_playlist_id, album_id, track_id)
                        bot.send_message(tg_usr_id, "–ù–µ –±—ã–ª–æ –æ–±—â–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞, —è —Å–æ–∑–¥–∞–ª –µ–≥–æ –∏ –∑–∞–∫–∏–Ω—É–ª —Ç—É–¥–∞ —Ç—Ä–µ–∫\n" + url)
                    else:
                        playlist_id = get_playlist_id_by_title(TOKEN, YA_USR_ID, playlist_title)
                        
                        add_track_to_playlist(TOKEN, YA_USR_ID, playlist_id, album_id, track_id)
                        bot.send_message(tg_usr_id, "–ó–∞–∫–∏–Ω—É–ª —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç\n" + get_playlist_url(YA_USR_ID, get_playlist_id_by_title(TOKEN, YA_USR_ID, playlist_title)))
                else:
                    print(dttm(), tg_usr_id, '- ERROR parse link')
                    bot.send_message(tg_usr_id, "–ù–µ –º–æ–≥—É —Å–ø–∞—Ä—Å–∏—Ç—å —Å—Å—ã–ª–∫—É, –ø—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å\n")  
            except:
                print(dttm(), tg_usr_id, '- ERROR add track')
        

if __name__ == "__main__":
    try:
        print(dttm(), 'BOT STARTED','\n')
        bot_time_start = time.mktime(datetime.now().timetuple())
        if(TG_ADMIN_ID != ''):bot.send_message(TG_ADMIN_ID, '–Ø –æ–∂–∏–ª!')
        bot.polling()
    except Exception as e:
        if(TG_ADMIN_ID != ''):bot.send_message(TG_ADMIN_ID, '–Ø –ø—Ä–∏–ª–µ–≥! ' + str(e))
        print(dttm(), 'BOT DOWN','\n')
        print(dttm(), e)